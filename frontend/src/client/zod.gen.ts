// This file is auto-generated by @hey-api/openapi-ts

import { IncomingMessage } from 'http';
import { z } from 'zod';

/**
 * Body_documents-process_multiple_documents
 */
export const zBodyDocumentsProcessMultipleDocuments = z.object({
    files: z.array(z.string()),
    course_id: z.uuid()
});

/**
 * Body_login-login_access_token
 */
export const zBodyLoginLoginAccessToken = z.object({
    grant_type: z.optional(z.union([
        z.string().regex(/^password$/),
        z.null()
    ])),
    username: z.string(),
    password: z.string(),
    scope: z.optional(z.string()).default(''),
    client_id: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    client_secret: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

/**
 * CourseCreate
 */
export const zCourseCreate = z.object({
    name: z.string().min(3).max(255),
    description: z.optional(z.union([
        z.string().max(1020),
        z.null()
    ]))
});

/**
 * DocumentPublic
 */
export const zDocumentPublic = z.object({
    id: z.uuid(),
    filename: z.string(),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    course_id: z.uuid(),
    updated_at: z.iso.datetime(),
    created_at: z.iso.datetime(),
    status: z.string()
});

/**
 * CoursePublic
 */
export const zCoursePublic = z.object({
    id: z.uuid(),
    owner_id: z.uuid(),
    name: z.string(),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    created_at: z.iso.datetime(),
    updated_at: z.iso.datetime(),
    documents: z.array(zDocumentPublic)
});

/**
 * CourseUpdate
 */
export const zCourseUpdate = z.object({
    name: z.optional(z.union([
        z.string().min(3).max(255),
        z.null()
    ])),
    description: z.optional(z.union([
        z.string().max(1020),
        z.null()
    ]))
});

/**
 * CourseWithDocuments
 */
export const zCourseWithDocuments = z.object({
    id: z.uuid(),
    owner_id: z.uuid(),
    name: z.string(),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    created_at: z.iso.datetime(),
    updated_at: z.iso.datetime(),
    documents: z.optional(z.array(zDocumentPublic)).default([])
});

/**
 * CoursesPublic
 */
export const zCoursesPublic = z.object({
    data: z.array(zCoursePublic),
    count: z.int()
});

/**
 * DocumentStatus
 */
export const zDocumentStatus = z.enum([
    'pending',
    'processing',
    'completed',
    'failed'
]);

/**
 * Document
 */
export const zDocument = z.object({
    title: z.string().min(1).max(255),
    id: z.optional(z.uuid()),
    chunk_count: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    course_id: z.uuid(),
    embedding_namespace: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    filename: z.string(),
    status: z.optional(zDocumentStatus),
    created_at: z.optional(z.iso.datetime()),
    updated_at: z.optional(z.iso.datetime())
});

/**
 * ValidationError
 */
export const zValidationError = z.object({
    loc: z.array(z.union([
        z.string(),
        z.int()
    ])),
    msg: z.string(),
    type: z.string()
});

/**
 * HTTPValidationError
 */
export const zHttpValidationError = z.object({
    detail: z.optional(z.array(zValidationError))
});

/**
 * ItemCreate
 */
export const zItemCreate = z.object({
    title: z.string().min(1).max(255),
    description: z.optional(z.union([
        z.string().max(255),
        z.null()
    ]))
});

/**
 * ItemPublic
 */
export const zItemPublic = z.object({
    title: z.string().min(1).max(255),
    description: z.optional(z.union([
        z.string().max(255),
        z.null()
    ])),
    id: z.uuid(),
    owner_id: z.uuid()
});

/**
 * ItemUpdate
 */
export const zItemUpdate = z.object({
    title: z.optional(z.union([
        z.string().min(1).max(255),
        z.null()
    ])),
    description: z.optional(z.union([
        z.string().max(255),
        z.null()
    ]))
});

/**
 * ItemsPublic
 */
export const zItemsPublic = z.object({
    data: z.array(zItemPublic),
    count: z.int()
});

/**
 * Message
 */
export const zMessage = z.object({
    message: z.string()
});

/**
 * NewPassword
 */
export const zNewPassword = z.object({
    token: z.string(),
    new_password: z.string().min(8).max(40)
});

/**
 * PrivateUserCreate
 */
export const zPrivateUserCreate = z.object({
    email: z.string(),
    password: z.string(),
    full_name: z.string(),
    is_verified: z.optional(z.boolean()).default(false)
});

/**
 * Token
 */
export const zToken = z.object({
    access_token: z.string(),
    token_type: z.optional(z.string()).default('bearer')
});

/**
 * UpdatePassword
 */
export const zUpdatePassword = z.object({
    current_password: z.string().min(8).max(40),
    new_password: z.string().min(8).max(40)
});

/**
 * UserCreate
 */
export const zUserCreate = z.object({
    email: z.email().max(255),
    is_active: z.optional(z.boolean()).default(true),
    is_superuser: z.optional(z.boolean()).default(false),
    full_name: z.optional(z.union([
        z.string().max(255),
        z.null()
    ])),
    password: z.string().min(8).max(40)
});

/**
 * UserPublic
 */
export const zUserPublic = z.object({
    email: z.email().max(255),
    is_active: z.optional(z.boolean()).default(true),
    is_superuser: z.optional(z.boolean()).default(false),
    full_name: z.optional(z.union([
        z.string().max(255),
        z.null()
    ])),
    id: z.uuid()
});

/**
 * UserRegister
 */
export const zUserRegister = z.object({
    email: z.email().max(255),
    password: z.string().min(8).max(40),
    full_name: z.optional(z.union([
        z.string().max(255),
        z.null()
    ]))
});

/**
 * UserUpdate
 */
export const zUserUpdate = z.object({
    email: z.optional(z.union([
        z.email().max(255),
        z.null()
    ])),
    is_active: z.optional(z.boolean()).default(true),
    is_superuser: z.optional(z.boolean()).default(false),
    full_name: z.optional(z.union([
        z.string().max(255),
        z.null()
    ])),
    password: z.optional(z.union([
        z.string().min(8).max(40),
        z.null()
    ]))
});

/**
 * UserUpdateMe
 */
export const zUserUpdateMe = z.object({
    full_name: z.optional(z.union([
        z.string().max(255),
        z.null()
    ])),
    email: z.optional(z.union([
        z.email().max(255),
        z.null()
    ]))
});

/**
 * UsersPublic
 */
export const zUsersPublic = z.object({
    data: z.array(zUserPublic),
    count: z.int()
});

export const zPostApiV1LoginAccessTokenData = z.object({
    body: zBodyLoginLoginAccessToken,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zPostApiV1LoginAccessTokenResponse = zToken;

export const zPostApiV1LoginTestTokenData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zPostApiV1LoginTestTokenResponse = zUserPublic;

export const zPostApiV1PasswordRecoveryByEmailData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        email: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zPostApiV1PasswordRecoveryByEmailResponse = zMessage;

export const zPostApiV1ResetPasswordData = z.object({
    body: zNewPassword,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zPostApiV1ResetPasswordResponse = zMessage;

export const zPostApiV1PasswordRecoveryHtmlContentByEmailData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        email: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zPostApiV1PasswordRecoveryHtmlContentByEmailResponse = z.string();

export const zGetApiV1UsersData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        skip: z.optional(z.int()).default(0),
        limit: z.optional(z.int()).default(100)
    }))
});

/**
 * Successful Response
 */
export const zGetApiV1UsersResponse = zUsersPublic;

export const zPostApiV1UsersData = z.object({
    body: zUserCreate,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zPostApiV1UsersResponse = zUserPublic;

export const zDeleteApiV1UsersMeData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zDeleteApiV1UsersMeResponse = zMessage;

export const zGetApiV1UsersMeData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zGetApiV1UsersMeResponse = zUserPublic;

export const zPatchApiV1UsersMeData = z.object({
    body: zUserUpdateMe,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zPatchApiV1UsersMeResponse = zUserPublic;

export const zPatchApiV1UsersMePasswordData = z.object({
    body: zUpdatePassword,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zPatchApiV1UsersMePasswordResponse = zMessage;

export const zPostApiV1UsersSignupData = z.object({
    body: zUserRegister,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zPostApiV1UsersSignupResponse = zUserPublic;

export const zDeleteApiV1UsersByUserIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        user_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zDeleteApiV1UsersByUserIdResponse = zMessage;

export const zGetApiV1UsersByUserIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        user_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zGetApiV1UsersByUserIdResponse = zUserPublic;

export const zPatchApiV1UsersByUserIdData = z.object({
    body: zUserUpdate,
    path: z.object({
        user_id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zPatchApiV1UsersByUserIdResponse = zUserPublic;

export const zPostApiV1UtilsTestEmailData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.object({
        email_to: z.email()
    })
});

/**
 * Successful Response
 */
export const zPostApiV1UtilsTestEmailResponse = zMessage;

export const zGetApiV1UtilsHealthCheckData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Response Utils-Health Check
 * Successful Response
 */
export const zGetApiV1UtilsHealthCheckResponse = z.boolean();

export const zGetApiV1ItemsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        skip: z.optional(z.int()).default(0),
        limit: z.optional(z.int()).default(100)
    }))
});

/**
 * Successful Response
 */
export const zGetApiV1ItemsResponse = zItemsPublic;

export const zPostApiV1ItemsData = z.object({
    body: zItemCreate,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zPostApiV1ItemsResponse = zItemPublic;

export const zDeleteApiV1ItemsByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zDeleteApiV1ItemsByIdResponse = zMessage;

export const zGetApiV1ItemsByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zGetApiV1ItemsByIdResponse = zItemPublic;

export const zPutApiV1ItemsByIdData = z.object({
    body: zItemUpdate,
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zPutApiV1ItemsByIdResponse = zItemPublic;

export const zGetApiV1CoursesData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        skip: z.optional(z.int()).default(0),
        limit: z.optional(z.int()).default(100)
    }))
});

/**
 * Successful Response
 */
export const zGetApiV1CoursesResponse = zCoursesPublic;

export const zPostApiV1CoursesData = z.object({
    body: zCourseCreate,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zPostApiV1CoursesResponse = zCoursePublic;

export const zDeleteApiV1CoursesByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zDeleteApiV1CoursesByIdResponse = zMessage;

export const zGetApiV1CoursesByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zGetApiV1CoursesByIdResponse = zCourseWithDocuments;

export const zPutApiV1CoursesByIdData = z.object({
    body: zCourseUpdate,
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zPutApiV1CoursesByIdResponse = zCoursePublic;

export const zGetApiV1CoursesByCourseIdDocumentsData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        course_id: z.string()
    }),
    query: z.optional(z.object({
        skip: z.optional(z.int()).default(0),
        limit: z.optional(z.int()).default(100)
    }))
});

/**
 * Response Courses-List Documents
 * Successful Response
 */
export const zGetApiV1CoursesByCourseIdDocumentsResponse = z.array(z.record(z.string(), z.unknown()));

export const zPostApiV1DocumentsProcessData = z.object({
    body: zBodyDocumentsProcessMultipleDocuments,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

export const zDeleteApiV1DocumentsByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

export const zGetApiV1DocumentsByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.uuid()
    }),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zGetApiV1DocumentsByIdResponse = zDocument;

export const zPostApiV1PrivateUsersData = z.object({
    body: zPrivateUserCreate,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Successful Response
 */
export const zPostApiV1PrivateUsersResponse = zUserPublic;

// Base chat message schema
export const zChatMessage = z.object({
  id: z.string(),
  message: z.string(),
  is_system: z.boolean(),
  course_id: z.string(),
  created_at: z.string(),
  updated_at: z.string(),
});

export type ChatMessage = z.infer<typeof zChatMessage>;

// Request schemas
export const zCreateChatStreamData = z.object({
    path: z.object({
      course_id: z.string(),
    }),
    body: z.object({
        message: z.string(),
    }),
});

export const zGetChatHistoryData = z.object({
    path: z.object({
        course_id: z.string(),
    }),
    query: z.object({
        limit: z.number().optional(),
    }).optional(),
});

// Response schemas
export const zGetChatHistoryResponse = z.array(zChatMessage);
export type GetChatHistoryResponse = z.infer<typeof zGetChatHistoryResponse>;

// Response types
export type CreateChatStreamResponses = IncomingMessage;
export type GetChatHistoryResponses = GetChatHistoryResponse;

// Error types
export type CreateChatStreamErrors = {
  404: { detail: string };
  401: { detail: string };
};

export type GetChatHistoryErrors = {
  404: { detail: string };
  401: { detail: string };
};
