// This file is auto-generated by @hey-api/openapi-ts

import { type Options as Options2, type Client, type TDataShape, urlSearchParamsBodySerializer, formDataBodySerializer } from './client';
import type { PostApiV1LoginAccessTokenData, PostApiV1LoginAccessTokenResponses, PostApiV1LoginAccessTokenErrors, PostApiV1LoginTestTokenData, PostApiV1LoginTestTokenResponses, PostApiV1PasswordRecoveryByEmailData, PostApiV1PasswordRecoveryByEmailResponses, PostApiV1PasswordRecoveryByEmailErrors, PostApiV1ResetPasswordData, PostApiV1ResetPasswordResponses, PostApiV1ResetPasswordErrors, PostApiV1PasswordRecoveryHtmlContentByEmailData, PostApiV1PasswordRecoveryHtmlContentByEmailResponses, PostApiV1PasswordRecoveryHtmlContentByEmailErrors, GetApiV1UsersData, GetApiV1UsersResponses, GetApiV1UsersErrors, PostApiV1UsersData, PostApiV1UsersResponses, PostApiV1UsersErrors, DeleteApiV1UsersMeData, DeleteApiV1UsersMeResponses, GetApiV1UsersMeData, GetApiV1UsersMeResponses, PatchApiV1UsersMeData, PatchApiV1UsersMeResponses, PatchApiV1UsersMeErrors, PatchApiV1UsersMePasswordData, PatchApiV1UsersMePasswordResponses, PatchApiV1UsersMePasswordErrors, PostApiV1UsersSignupData, PostApiV1UsersSignupResponses, PostApiV1UsersSignupErrors, DeleteApiV1UsersByUserIdData, DeleteApiV1UsersByUserIdResponses, DeleteApiV1UsersByUserIdErrors, GetApiV1UsersByUserIdData, GetApiV1UsersByUserIdResponses, GetApiV1UsersByUserIdErrors, PatchApiV1UsersByUserIdData, PatchApiV1UsersByUserIdResponses, PatchApiV1UsersByUserIdErrors, PostApiV1UtilsTestEmailData, PostApiV1UtilsTestEmailResponses, PostApiV1UtilsTestEmailErrors, GetApiV1UtilsHealthCheckData, GetApiV1UtilsHealthCheckResponses, GetApiV1ItemsData, GetApiV1ItemsResponses, GetApiV1ItemsErrors, PostApiV1ItemsData, PostApiV1ItemsResponses, PostApiV1ItemsErrors, DeleteApiV1ItemsByIdData, DeleteApiV1ItemsByIdResponses, DeleteApiV1ItemsByIdErrors, GetApiV1ItemsByIdData, GetApiV1ItemsByIdResponses, GetApiV1ItemsByIdErrors, PutApiV1ItemsByIdData, PutApiV1ItemsByIdResponses, PutApiV1ItemsByIdErrors, GetApiV1CoursesData, GetApiV1CoursesResponses, GetApiV1CoursesErrors, PostApiV1CoursesData, PostApiV1CoursesResponses, PostApiV1CoursesErrors, DeleteApiV1CoursesByIdData, DeleteApiV1CoursesByIdResponses, DeleteApiV1CoursesByIdErrors, GetApiV1CoursesByIdData, GetApiV1CoursesByIdResponses, GetApiV1CoursesByIdErrors, PutApiV1CoursesByIdData, PutApiV1CoursesByIdResponses, PutApiV1CoursesByIdErrors, GetApiV1CoursesByCourseIdDocumentsData, GetApiV1CoursesByCourseIdDocumentsResponses, GetApiV1CoursesByCourseIdDocumentsErrors, PostApiV1DocumentsProcessData, PostApiV1DocumentsProcessResponses, PostApiV1DocumentsProcessErrors, DeleteApiV1DocumentsByIdData, DeleteApiV1DocumentsByIdResponses, DeleteApiV1DocumentsByIdErrors, GetApiV1DocumentsByIdData, GetApiV1DocumentsByIdResponses, GetApiV1DocumentsByIdErrors, PostApiV1PrivateUsersData, PostApiV1PrivateUsersResponses, PostApiV1PrivateUsersErrors, CreateChatStreamData, GetChatHistoryData } from './types.gen';
import { zPostApiV1LoginAccessTokenData, zPostApiV1LoginAccessTokenResponse, zPostApiV1LoginTestTokenData, zPostApiV1LoginTestTokenResponse, zPostApiV1PasswordRecoveryByEmailData, zPostApiV1PasswordRecoveryByEmailResponse, zPostApiV1ResetPasswordData, zPostApiV1ResetPasswordResponse, zPostApiV1PasswordRecoveryHtmlContentByEmailData, zPostApiV1PasswordRecoveryHtmlContentByEmailResponse, zGetApiV1UsersData, zGetApiV1UsersResponse, zPostApiV1UsersData, zPostApiV1UsersResponse, zDeleteApiV1UsersMeData, zDeleteApiV1UsersMeResponse, zGetApiV1UsersMeData, zGetApiV1UsersMeResponse, zPatchApiV1UsersMeData, zPatchApiV1UsersMeResponse, zPatchApiV1UsersMePasswordData, zPatchApiV1UsersMePasswordResponse, zPostApiV1UsersSignupData, zPostApiV1UsersSignupResponse, zDeleteApiV1UsersByUserIdData, zDeleteApiV1UsersByUserIdResponse, zGetApiV1UsersByUserIdData, zGetApiV1UsersByUserIdResponse, zPatchApiV1UsersByUserIdData, zPatchApiV1UsersByUserIdResponse, zPostApiV1UtilsTestEmailData, zPostApiV1UtilsTestEmailResponse, zGetApiV1UtilsHealthCheckData, zGetApiV1UtilsHealthCheckResponse, zGetApiV1ItemsData, zGetApiV1ItemsResponse, zPostApiV1ItemsData, zPostApiV1ItemsResponse, zDeleteApiV1ItemsByIdData, zDeleteApiV1ItemsByIdResponse, zGetApiV1ItemsByIdData, zGetApiV1ItemsByIdResponse, zPutApiV1ItemsByIdData, zPutApiV1ItemsByIdResponse, zGetApiV1CoursesData, zGetApiV1CoursesResponse, zPostApiV1CoursesData, zPostApiV1CoursesResponse, zDeleteApiV1CoursesByIdData, zDeleteApiV1CoursesByIdResponse, zGetApiV1CoursesByIdData, zGetApiV1CoursesByIdResponse, zPutApiV1CoursesByIdData, zPutApiV1CoursesByIdResponse, zGetApiV1CoursesByCourseIdDocumentsData, zGetApiV1CoursesByCourseIdDocumentsResponse, zPostApiV1DocumentsProcessData, zDeleteApiV1DocumentsByIdData, zGetApiV1DocumentsByIdData, zGetApiV1DocumentsByIdResponse, zPostApiV1PrivateUsersData, zPostApiV1PrivateUsersResponse, zCreateChatStreamData, CreateChatStreamResponses, CreateChatStreamErrors, GetChatHistoryResponses, GetChatHistoryErrors, zGetChatHistoryData, zGetChatHistoryResponse } from './zod.gen';
import { client } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     */
    public static postApiV1LoginAccessToken<ThrowOnError extends boolean = true>(options: Options<PostApiV1LoginAccessTokenData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1LoginAccessTokenResponses, PostApiV1LoginAccessTokenErrors, ThrowOnError>({
            ...urlSearchParamsBodySerializer,
            requestValidator: async (data) => {
                return await zPostApiV1LoginAccessTokenData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPostApiV1LoginAccessTokenResponse.parseAsync(data);
            },
            url: '/api/v1/login/access-token',
            ...options,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                ...options.headers
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     */
    public static postApiV1LoginTestToken<ThrowOnError extends boolean = true>(options?: Options<PostApiV1LoginTestTokenData, ThrowOnError>) {
        return (options?.client ?? client).post<PostApiV1LoginTestTokenResponses, unknown, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1LoginTestTokenData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPostApiV1LoginTestTokenResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/login/test-token',
            ...options
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     */
    public static postApiV1PasswordRecoveryByEmail<ThrowOnError extends boolean = true>(options: Options<PostApiV1PasswordRecoveryByEmailData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1PasswordRecoveryByEmailResponses, PostApiV1PasswordRecoveryByEmailErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1PasswordRecoveryByEmailData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPostApiV1PasswordRecoveryByEmailResponse.parseAsync(data);
            },
            url: '/api/v1/password-recovery/{email}',
            ...options
        });
    }
    
    /**
     * Reset Password
     * Reset password
     */
    public static postApiV1ResetPassword<ThrowOnError extends boolean = true>(options: Options<PostApiV1ResetPasswordData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1ResetPasswordResponses, PostApiV1ResetPasswordErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1ResetPasswordData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPostApiV1ResetPasswordResponse.parseAsync(data);
            },
            url: '/api/v1/reset-password/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     */
    public static postApiV1PasswordRecoveryHtmlContentByEmail<ThrowOnError extends boolean = true>(options: Options<PostApiV1PasswordRecoveryHtmlContentByEmailData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1PasswordRecoveryHtmlContentByEmailResponses, PostApiV1PasswordRecoveryHtmlContentByEmailErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1PasswordRecoveryHtmlContentByEmailData.parseAsync(data);
            },
            responseType: 'text',
            responseValidator: async (data) => {
                return await zPostApiV1PasswordRecoveryHtmlContentByEmailResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/password-recovery-html-content/{email}',
            ...options
        });
    }
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     */
    public static getApiV1Users<ThrowOnError extends boolean = true>(options?: Options<GetApiV1UsersData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiV1UsersResponses, GetApiV1UsersErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1UsersData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1UsersResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/',
            ...options
        });
    }
    
    /**
     * Create User
     * Create new user.
     */
    public static postApiV1Users<ThrowOnError extends boolean = true>(options: Options<PostApiV1UsersData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1UsersResponses, PostApiV1UsersErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1UsersData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPostApiV1UsersResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     */
    public static deleteApiV1UsersMe<ThrowOnError extends boolean = true>(options?: Options<DeleteApiV1UsersMeData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteApiV1UsersMeResponses, unknown, ThrowOnError>({
            requestValidator: async (data) => {
                return await zDeleteApiV1UsersMeData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zDeleteApiV1UsersMeResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     */
    public static getApiV1UsersMe<ThrowOnError extends boolean = true>(options?: Options<GetApiV1UsersMeData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiV1UsersMeResponses, unknown, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1UsersMeData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1UsersMeResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     */
    public static patchApiV1UsersMe<ThrowOnError extends boolean = true>(options: Options<PatchApiV1UsersMeData, ThrowOnError>) {
        return (options.client ?? client).patch<PatchApiV1UsersMeResponses, PatchApiV1UsersMeErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPatchApiV1UsersMeData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPatchApiV1UsersMeResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     */
    public static patchApiV1UsersMePassword<ThrowOnError extends boolean = true>(options: Options<PatchApiV1UsersMePasswordData, ThrowOnError>) {
        return (options.client ?? client).patch<PatchApiV1UsersMePasswordResponses, PatchApiV1UsersMePasswordErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPatchApiV1UsersMePasswordData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPatchApiV1UsersMePasswordResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/me/password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     */
    public static postApiV1UsersSignup<ThrowOnError extends boolean = true>(options: Options<PostApiV1UsersSignupData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1UsersSignupResponses, PostApiV1UsersSignupErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1UsersSignupData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPostApiV1UsersSignupResponse.parseAsync(data);
            },
            url: '/api/v1/users/signup',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     */
    public static deleteApiV1UsersByUserId<ThrowOnError extends boolean = true>(options: Options<DeleteApiV1UsersByUserIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteApiV1UsersByUserIdResponses, DeleteApiV1UsersByUserIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zDeleteApiV1UsersByUserIdData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zDeleteApiV1UsersByUserIdResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     */
    public static getApiV1UsersByUserId<ThrowOnError extends boolean = true>(options: Options<GetApiV1UsersByUserIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetApiV1UsersByUserIdResponses, GetApiV1UsersByUserIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1UsersByUserIdData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1UsersByUserIdResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options
        });
    }
    
    /**
     * Update User
     * Update a user.
     */
    public static patchApiV1UsersByUserId<ThrowOnError extends boolean = true>(options: Options<PatchApiV1UsersByUserIdData, ThrowOnError>) {
        return (options.client ?? client).patch<PatchApiV1UsersByUserIdResponses, PatchApiV1UsersByUserIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPatchApiV1UsersByUserIdData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPatchApiV1UsersByUserIdResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/users/{user_id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     */
    public static postApiV1UtilsTestEmail<ThrowOnError extends boolean = true>(options: Options<PostApiV1UtilsTestEmailData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1UtilsTestEmailResponses, PostApiV1UtilsTestEmailErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1UtilsTestEmailData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPostApiV1UtilsTestEmailResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/utils/test-email/',
            ...options
        });
    }
    
    /**
     * Health Check
     */
    public static getApiV1UtilsHealthCheck<ThrowOnError extends boolean = true>(options?: Options<GetApiV1UtilsHealthCheckData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiV1UtilsHealthCheckResponses, unknown, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1UtilsHealthCheckData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1UtilsHealthCheckResponse.parseAsync(data);
            },
            url: '/api/v1/utils/health-check/',
            ...options
        });
    }
}

export class ItemsService {
    /**
     * Read Items
     * Retrieve items.
     */
    public static getApiV1Items<ThrowOnError extends boolean = true>(options?: Options<GetApiV1ItemsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiV1ItemsResponses, GetApiV1ItemsErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1ItemsData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1ItemsResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/',
            ...options
        });
    }
    
    /**
     * Create Item
     * Create new item.
     */
    public static postApiV1Items<ThrowOnError extends boolean = true>(options: Options<PostApiV1ItemsData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1ItemsResponses, PostApiV1ItemsErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1ItemsData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPostApiV1ItemsResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete Item
     * Delete an item.
     */
    public static deleteApiV1ItemsById<ThrowOnError extends boolean = true>(options: Options<DeleteApiV1ItemsByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteApiV1ItemsByIdResponses, DeleteApiV1ItemsByIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zDeleteApiV1ItemsByIdData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zDeleteApiV1ItemsByIdResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/{id}',
            ...options
        });
    }
    
    /**
     * Read Item
     * Get item by ID.
     */
    public static getApiV1ItemsById<ThrowOnError extends boolean = true>(options: Options<GetApiV1ItemsByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetApiV1ItemsByIdResponses, GetApiV1ItemsByIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1ItemsByIdData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1ItemsByIdResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/{id}',
            ...options
        });
    }
    
    /**
     * Update Item
     * Update an item.
     */
    public static putApiV1ItemsById<ThrowOnError extends boolean = true>(options: Options<PutApiV1ItemsByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutApiV1ItemsByIdResponses, PutApiV1ItemsByIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPutApiV1ItemsByIdData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPutApiV1ItemsByIdResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/items/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class CoursesService {
    /**
     * Read Courses
     * Retrieve courses.
     */
    public static getApiV1Courses<ThrowOnError extends boolean = true>(options?: Options<GetApiV1CoursesData, ThrowOnError>) {
        return (options?.client ?? client).get<GetApiV1CoursesResponses, GetApiV1CoursesErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1CoursesData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1CoursesResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/courses/',
            ...options
        });
    }
    
    /**
     * Create Course
     * Create new course.
     */
    public static postApiV1Courses<ThrowOnError extends boolean = true>(options: Options<PostApiV1CoursesData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1CoursesResponses, PostApiV1CoursesErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1CoursesData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPostApiV1CoursesResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/courses/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Delete Course
     * Delete an course.
     */
    public static deleteApiV1CoursesById<ThrowOnError extends boolean = true>(options: Options<DeleteApiV1CoursesByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteApiV1CoursesByIdResponses, DeleteApiV1CoursesByIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zDeleteApiV1CoursesByIdData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zDeleteApiV1CoursesByIdResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/courses/{id}',
            ...options
        });
    }
    
    /**
     * Read Course
     * Get course by ID, including its documents.
     */
    public static getApiV1CoursesById<ThrowOnError extends boolean = true>(options: Options<GetApiV1CoursesByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetApiV1CoursesByIdResponses, GetApiV1CoursesByIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1CoursesByIdData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1CoursesByIdResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/courses/{id}',
            ...options
        });
    }
    
    /**
     * Update Course
     * Update an course.
     */
    public static putApiV1CoursesById<ThrowOnError extends boolean = true>(options: Options<PutApiV1CoursesByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutApiV1CoursesByIdResponses, PutApiV1CoursesByIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPutApiV1CoursesByIdData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPutApiV1CoursesByIdResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/courses/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * List Documents
     * List documents for a specific course.
     */
    public static getApiV1CoursesByCourseIdDocuments<ThrowOnError extends boolean = true>(options: Options<GetApiV1CoursesByCourseIdDocumentsData, ThrowOnError>) {
        return (options.client ?? client).get<GetApiV1CoursesByCourseIdDocumentsResponses, GetApiV1CoursesByCourseIdDocumentsErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1CoursesByCourseIdDocumentsData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1CoursesByCourseIdDocumentsResponse.parseAsync(data);
            },
            url: '/api/v1/courses/{course_id}/documents',
            ...options
        });
    }
}

export class DocumentsService {
    /**
     * Process Multiple Documents
     * Accept multiple PDF uploads, save to temp files, and queue a background task for each.
     */
    public static postApiV1DocumentsProcess<ThrowOnError extends boolean = true>(options: Options<PostApiV1DocumentsProcessData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1DocumentsProcessResponses, PostApiV1DocumentsProcessErrors, ThrowOnError>({
            ...formDataBodySerializer,
            requestValidator: async (data) => {
                return await zPostApiV1DocumentsProcessData.parseAsync(data);
            },
            responseType: 'json',
            url: '/api/v1/documents/process',
            ...options,
            headers: {
                'Content-Type': null,
                ...options.headers
            }
        });
    }
    
    /**
     * Delete Document
     * Delete a document by its ID, ensuring the user has permissions.
     */
    public static deleteApiV1DocumentsById<ThrowOnError extends boolean = true>(options: Options<DeleteApiV1DocumentsByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteApiV1DocumentsByIdResponses, DeleteApiV1DocumentsByIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zDeleteApiV1DocumentsByIdData.parseAsync(data);
            },
            responseType: 'json',
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/documents/{id}',
            ...options
        });
    }
    
    /**
     * Read Document
     * Get a document by its ID, ensuring the user has permissions.
     */
    public static getApiV1DocumentsById<ThrowOnError extends boolean = true>(options: Options<GetApiV1DocumentsByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetApiV1DocumentsByIdResponses, GetApiV1DocumentsByIdErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetApiV1DocumentsByIdData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zGetApiV1DocumentsByIdResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api/v1/documents/{id}',
            ...options
        });
    }
}

export class PrivateService {
    /**
     * Create User
     * Create a new user.
     */
    public static postApiV1PrivateUsers<ThrowOnError extends boolean = true>(options: Options<PostApiV1PrivateUsersData, ThrowOnError>) {
        return (options.client ?? client).post<PostApiV1PrivateUsersResponses, PostApiV1PrivateUsersErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zPostApiV1PrivateUsersData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zPostApiV1PrivateUsersResponse.parseAsync(data);
            },
            url: '/api/v1/private/users/',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class ChatService {
    /**
     * Chat Stream
     * Stream chat completions from the AI model.
     */
    public static postApiV1ChatStream<ThrowOnError extends boolean = true>(
        options: Options<CreateChatStreamData, ThrowOnError>
    ) {
        return (options.client ?? client).post<CreateChatStreamResponses, CreateChatStreamErrors, ThrowOnError>({
            requestValidator: async (data) => await zCreateChatStreamData.parseAsync(data),
            responseType: "stream",
            security: [{
                scheme: 'bearer',
                type: 'http'
            }],
            url: "/api/v1/chat/{course_id}/stream",
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }

    /**
     * Get chat history for a course
     * @param options - Options for the request
     * @returns Chat history response
     */
    public static getApiV1ChatHistory<ThrowOnError extends boolean = true>(
        options: Options<GetChatHistoryData, ThrowOnError>
    ) {
        return (options.client ?? client).get<GetChatHistoryResponses, GetChatHistoryErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetChatHistoryData.parseAsync(data);
            },
            responseType: "json",
            responseValidator: async (data) => {
               return await zGetChatHistoryResponse.parseAsync(data);
            },
            security: [{
                scheme: 'bearer',
                type: 'http'
            }],
            url: "/api/v1/chat/{course_id}/history",
            ...options,
        });
    }
}
